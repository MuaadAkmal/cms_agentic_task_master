// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model
model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  role      String     @default("employee")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  tasks     Task[]     @relation("AssignedTasks")
  messages  Message[]  @relation("UserMessages")
  documents Document[] @relation("UserDocuments")
  groupChats GroupChat[] @relation("UserGroupChats")
}

// Task model
model Task {
  id                  String   @id @default(uuid())
  lsa                 String   // LSA (dropdown)
  tsp                 String   // TSP (dropdown)
  dotAndLea           String   // Dot & Lea (dropdown)
  problemDescription  String
  status              String   @default("Pending") // Pending, Approved, etc.
  solutionProvided    String?  // Optional
  remarks             String?  // Optional
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  assignedTo          User?    @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId        String?
}

// Message model
model Message {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  
  // Relations
  sender      User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId    String
  
  // Group chat message
  groupChat   GroupChat? @relation("GroupMessages", fields: [groupChatId], references: [id])
  groupChatId String?

  // Individual chat message
  receiverId  String?  // If null, it's a group message
}

// Document model for file uploads
model Document {
  id          String   @id @default(uuid())
  name        String
  url         String
  type        String
  createdAt   DateTime @default(now())
  
  // Relations  
  uploadedBy  User     @relation("UserDocuments", fields: [uploadedById], references: [id])
  uploadedById String
}

// Group chat model
model GroupChat {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  participants User[]   @relation("UserGroupChats")
  messages     Message[] @relation("GroupMessages")
}

// TaskNote model for quick task notes widget
model TaskNote {
  id        String    @id @default(uuid())
  message   String
  checked   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
